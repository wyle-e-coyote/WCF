//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GumballMachineMonitor.GumballMachine {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="State", ConfigurationName="GumballMachine.GumballMachine")]
    public interface GumballMachine {
        
        [System.ServiceModel.OperationContractAttribute(Action="State/GumballMachine/getCount", ReplyAction="State/GumballMachine/getCountResponse")]
        int getCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="State/GumballMachine/getCount", ReplyAction="State/GumballMachine/getCountResponse")]
        System.Threading.Tasks.Task<int> getCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="State/GumballMachine/getLocation", ReplyAction="State/GumballMachine/getLocationResponse")]
        string getLocation();
        
        [System.ServiceModel.OperationContractAttribute(Action="State/GumballMachine/getLocation", ReplyAction="State/GumballMachine/getLocationResponse")]
        System.Threading.Tasks.Task<string> getLocationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="State/GumballMachine/getState", ReplyAction="State/GumballMachine/getStateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State.NoQuarterState))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State.SoldOutState))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State.SoldState))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State.WinnerState))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State.HasQuarterState))]
        State.IState getState();
        
        [System.ServiceModel.OperationContractAttribute(Action="State/GumballMachine/getState", ReplyAction="State/GumballMachine/getStateResponse")]
        System.Threading.Tasks.Task<State.IState> getStateAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface GumballMachineChannel : GumballMachineMonitor.GumballMachine.GumballMachine, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GumballMachineClient : System.ServiceModel.ClientBase<GumballMachineMonitor.GumballMachine.GumballMachine>, GumballMachineMonitor.GumballMachine.GumballMachine {
        
        public GumballMachineClient() {
        }
        
        public GumballMachineClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GumballMachineClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GumballMachineClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GumballMachineClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int getCount() {
            return base.Channel.getCount();
        }
        
        public System.Threading.Tasks.Task<int> getCountAsync() {
            return base.Channel.getCountAsync();
        }
        
        public string getLocation() {
            return base.Channel.getLocation();
        }
        
        public System.Threading.Tasks.Task<string> getLocationAsync() {
            return base.Channel.getLocationAsync();
        }
        
        public State.IState getState() {
            return base.Channel.getState();
        }
        
        public System.Threading.Tasks.Task<State.IState> getStateAsync() {
            return base.Channel.getStateAsync();
        }
    }
}
